#!/usr/bin/env python

import attr
import click
import click_spinner
import json

from datetime import datetime
from typing import IO, Iterable, Optional

from jira_analysis.config.config import get_config as analysis_config
from jira_analysis.conversions.cycle_time import convert_jira_to_cycle_time
from jira_analysis.conversions.defect_rate import convert_jira_to_defect
from jira_analysis.cycle_time.chart.ticket_control import generate_control_chart
from jira_analysis.cycle_time.chart.exceptions import ChartError
from jira_analysis.defect_rate.chart.defect import generate_defect_chart
from jira_analysis.file_handlers import json_handler
from jira_analysis.jira.auth import get_config as jira_config
from jira_analysis.jira.issue import parse_json as parse_jira_ticket_from_json
from jira_analysis.jira.network import get_issues, get_project


@click.group()
def cli() -> None:
    click.echo("Starting")


@cli.command()
@click.argument("project", type=str)
@click.argument("file_out", type=click.File("w"))
@click.option("credentials", "-c", type=click.File("r"), help="Jira credentials file")
def fetch(project: str, file_out: IO[str], credentials: IO[str]) -> None:
    """Fetch tickets from PROJECT and write them as JSON to FILE_OUT."""
    click.echo("Loading credentials")
    config = jira_config(credentials)
    click.echo("Downloading Jira tickets")
    tickets = get_issues(config, get_project(config, project.upper()))
    click.echo("Saving Jira tickets")
    json_handler.dump([attr.asdict(ticket) for ticket in tickets], file_out)


@cli.command()
@click.argument("project", type=str)
@click.argument("file_in", type=click.File())
@click.option(
    "date_start",
    "-s",
    type=click.DateTime(),
    help="Analyse tickets closed on or after this date.",
)
@click.option(
    "exclude", "-e", type=str, required=False, multiple=True, help="Exclude ticket IDs."
)
@click.option(
    "config", "-c", type=click.File(), help="Config file to use for analysis."
)
def cycle_time(
    project: str,
    file_in: IO[str],
    date_start: Optional[datetime],
    exclude: Iterable[str],
    config: IO[str],
) -> None:
    """Analyse pre-fetched tickets from the given file_in.

    PROJECT The Project Key to analyse - this is used to define the ticket status and other rules.

    FILE_IN The file path to load.
    """
    click.echo("Loading config")
    config_file = analysis_config(project, config)
    click.echo("Loading Jira tickets")
    data = json.load(file_in)
    jira_tickets = (parse_jira_ticket_from_json(t) for t in data)
    jira_tickets = (
        jt
        for jt in jira_tickets
        if config_file.should_be_analysed(jt.issue_type)
        and jt.key not in config_file.exclude_issues
    )
    issues = (convert_jira_to_cycle_time(config_file, j) for j in jira_tickets)
    if date_start is not None:
        issues = (
            i
            for i in issues
            if i.completed is not None and i.completed.date() >= date_start.date()
        )
    if exclude:
        exclude_ids = set(exclude)
        issues = (i for i in issues if i.key not in exclude_ids)
    click.echo("Building Cycle Time chart")
    try:
        generate_control_chart(list(issues))
    except ChartError as e:
        click.echo(f"Could not generate control chart: {e}")


@cli.command()
@click.argument("project", type=str)
@click.argument("file_in", type=click.File())
@click.option(
    "date_start",
    "-s",
    type=click.DateTime(),
    help="Analyse tickets closed on or after this date.",
)
@click.option("config", "-c", type=click.File(), help="Config file to use for analysis")
def defect_rate(
    project: str, file_in: IO[str], date_start: datetime, config: IO[str]
) -> None:
    click.echo("Loading config")
    config_file = analysis_config(project, config)
    click.echo("Loading Jira tickets")
    data = json.load(file_in)
    jira_tickets = (parse_jira_ticket_from_json(t) for t in data)
    jira_tickets = (
        jt for jt in jira_tickets if config_file.should_be_analysed(jt.issue_type)
    )
    jira_tickets = (
        jt for jt in jira_tickets if config_file.is_completed_status(jt.status)
    )

    issues = (convert_jira_to_defect(jt, config_file) for jt in jira_tickets)

    if date_start is not None:
        issues = (
            i
            for i in issues
            if i.completed is not None and i.completed >= date_start.date()
        )

    click.echo("Building Defect Rate chart")
    generate_defect_chart(list(issues))


if __name__ == "__main__":
    with click_spinner.spinner():
        cli()
